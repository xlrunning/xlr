<?php

namespace Lexing\ImportedCarBundle\Repository;
use Carbon\Carbon;
use Lexing\ImportedCarBundle\Entity\ImportedVehicle;
use Lexing\VehicleBundle\Entity\Vehicle;
use Lexing\VehicleBundle\Entity\VehicleBrand;
use Lexing\VehicleBundle\Entity\VehicleModel;
use Lexing\VehicleBundle\Entity\VehicleSerie;

use Symfony\Component\Validator\Constraints\IsTrue;
use Symfony\Component\Validator\ConstraintViolation;
use Symfony\Component\Validator\Validation;
use Symfony\Component\Validator\Constraints\Length;
use Symfony\Component\Validator\Constraints\NotBlank;
use Symfony\Component\Validator\Constraints\Type;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * ImportedVehicleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ImportedVehicleRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param $payload
     * @param VehicleModel $model
     * @return bool
     */
    public function storeVehicle(
        $payload,
        $dealer = null,
        $model
    )
    {
        $vehicleModel = new ImportedVehicle();
        $vehicleModel->setInfo($payload['imported_info']);
        $vehicleModel->setStock($payload['imported_stock']);
        $vehicleModel->setColor($payload['imported_color']);
        $vehicleModel->setOnSale($payload['imported_on_sale']);
        $vehicleModel->setPic($payload['image']);
        $vehicleModel->setDealer($dealer);
        $vehicleModel->setModel($model);
        //$vehicleModel->getModel()->setYear(Carbon::parse($payload['register_date'])->year);

        $this->_em->persist($vehicleModel);
        $this->_em->flush();

        return true;
    }

    /**
     * @var array
     */
    public $result = [];

    /**
     * @param $payload
     * @return bool
     */
    public function validate($payload)
    {
        $validator = Validation::createValidator();
        $validatorList = [
            'imported_stock' => [
                new Type('integer'),
                new NotBlank(),
            ],
            'imported_color' => [
                new NotBlank(),
            ],
            'imported_info' => [
                new NotBlank(),
            ],
            'imported_on_sale' => [
                new NotBlank(),
            ],
            'imported_brand' => [
            ],
            'imported_series' => [
            ],
            'imported_model' => [
            ],
        ];

        foreach ($validatorList as $source => $item) {
            if (isset($payload[$source])) {
                $this->patternOf(
                    $payload[$source],
                    $item,
                    $validator
                );
            } else {
                throw new \RuntimeException('Payload\'s Index ' . $source . ' undefine.');
            }
        }

        return $this->result();
    }

    /**
     * @param $source
     * @param $validator
     * @param $valid
     */
    public function patternOf(
        $source, $item, $valid
    ) {
        $violations = $valid->validate($source, $item);

        if (0 !== count($violations)) {
            foreach ($violations as $violation) {
                /** @var ConstraintViolation $violation */
                if (!empty($source)) {
                    $this->result[] = [
                        'field' => $source,
                        'parameters' => (array)$violation->getParameters(),
                        'message' => $violation->getMessage()
                    ];
                }
            }

        } else {
            // $this->result = [];
        }
    }

    /**
     * null is right.
     *
     * @return bool|array
     */
    public function result()
    {
        if (is_array($this->result) AND $this->result != []) {
            return $this->result;
        }

        return null;
    }
}
